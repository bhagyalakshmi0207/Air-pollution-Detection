# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jfd-93kzAc003SqidlOc1zRnZFF7nXsG
"""

#import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#loading sensoe data
df = pd.read_csv('/content/test.csv')
df['date_time'] = pd.to_datetime(df['date_time']) # converts the "date_time" column from text/string format into a proper datetime
print(df)

# Plot Temperature & Humidity
plt.figure(figsize=(10, 5))
plt.plot(df['date_time'], df['deg_C'], label='Temperature (Â°C)')
plt.plot(df['date_time'], df['relative_humidity'], label='Humidity (%)')
plt.title("Temperature & Humidity Over Time")
plt.xlabel("Date")
plt.ylabel("Value")
plt.legend()
plt.grid(True)
plt.show()

# Plot Air Quality (using sensor data)
plt.figure(figsize=(10, 5))
plt.plot(df['date_time'], df['sensor_1'], label='Air Quality (Sensor 1)')
plt.title("Air Quality Sensor Readings")
plt.xlabel("Date")
plt.ylabel("Sensor Value")
plt.legend()
plt.grid(True)
plt.show()

import cv2
import numpy as np
from google.colab.patches import cv2_imshow  # Required for Colab image display

def detect_pollution(image_path):
    try:
        img = cv2.imread(image_path)
        if img is None:
            raise FileNotFoundError(f"Image not found at {image_path}")

        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #Used to compute brightness/contrast.
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) #Helps analyze color purity (saturation).

        # Compute contrast and brightness
        contrast = np.std(gray)
        brightness = np.mean(gray)

        # Compute edge detection
        edges = cv2.Canny(gray, 100, 200)
        edge_mean = cv2.mean(edges)[0]

        # Compute blue channel intensity (used for sky detection)
        blue_channel_mean = np.mean(img[:, :, 0])  # Extract the Blue channel

        # Compute saturation
        saturation = np.mean(hsv[:, :, 1])

        print(f"Contrast: {contrast:.2f}, Brightness: {brightness:.2f}, Edge Mean: {edge_mean:.2f}, Blue Intensity: {blue_channel_mean:.2f}, Saturation: {saturation:.2f}")

        # Determine if the image is likely a sky scene
        if contrast < 20 and blue_channel_mean > 130:  # Adjust threshold as needed
            print("Detected as sky image.")
            pollution_score = max(0, 100 - (saturation / 3))  # Reduce saturation impact # Higher = more polluted
        else:
            print("Detected as landscape image.")
            pollution_score = 100 - (edge_mean / 2)  # Pollution based on edge density

        # Adjust pollution score based on blue intensity (clear sky correction)
        if blue_channel_mean > 200 and brightness > 200:
            pollution_score = max(0, pollution_score - 40)  # Reduce pollution score for clear sky

        # Classify air quality
        if pollution_score < 25:
            air_quality = "Excellent (Very Clean Air)"
        elif pollution_score < 50:
            air_quality = "Good (Clean Air)"
        elif pollution_score < 75:
            air_quality = "Moderate (Mild Pollution)"
        else:
            air_quality = "Poor (Heavy Pollution)"

        print("Original Image:")
        cv2_imshow(img)
        print("Edge Detection (Pollution Indicators):")
        cv2_imshow(edges)
        print(f"\nPollution Score: {pollution_score:.1f}/100 (higher = worse)")
        print(f"Air Quality: {air_quality}")
        return pollution_score

    except Exception as e:
        print(f"Error: {str(e)}")
        return None

image_path = "/content/drive/MyDrive/Aii Air Pollution Project/soil.jpg"
detect_pollution(image_path)